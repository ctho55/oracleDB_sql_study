=====================================================
*** spool 사용하기
=> spool ... 이후 부터  spool off 까지 실행한 sql 구문이 아래 화일에 보관됨.

sql>spool d:\MTest\sql0726.txt 

=> 계속 추가  
sql>spool d:\MTest\sql001.txt  append 
 
sql>spool off   

-----------------------------------------------------------------

*** @ d:\MTest\sqlStart.txt  => 자동실행 가능
*** @ d:\MTest\sql000.txt  => 자동실행 가능
*** GET d:\MTest\sqlStart.txt    sqlPlus 로 화일 불러오기
*** edit d:\MTest\boardset.txt   메모장으로 열기
 
sqlplus system/oracle
conn  system/oracle

set linesize 200
set pagesize 200

COLUMN id Format a10 ;
COLUMN password Format a10 ;
COLUMN birthd Format a10 ;
COLUMN name Format a10 ;
COLUMN point Format 99999;
COLUMN weight Format 99999;
COLUMN rid Format a10 ;

COLUMN sno Format 99999 ;
COLUMN address Format a15 ;
COLUMN title Format a15 ;
COLUMN seq Format 999 ;
COLUMN content Format a40 ;
COLUMN regdate Format a12 ;

COLUMN idno Format a14 ;
COLUMN name Format a10 ;
COLUMN age Format 999 ;
COLUMN gender Format a6 ;


COLUMN price Format 999999 ;
COLUMN code Format a10 ;

COLUMN root Format 999 ;
COLUMN step Format 999 ;
COLUMN indent Format 999 ;

COLUMN username Format a15 ;
COLUMN granted_role Format a20 ;

COLUMN Constraint_Name Format a15 ;
COLUMN Column_Name Format a15 ;
COLUMN Constraint_Type Format a15 ;
COLUMN Table_Name Format a15 ;


=================================================

*** 관련 능력 단위

***  능력단위 : 2001020205_16v4   데이터 입출력 구현
    ** 능력단위요소
	=> 2001020205_16v4.3  데이터 조작 프로시저 작성하기 
     	=> 2001020205_16v4.4  데이터 조작 프로시저 최적화하기

***  능력단위 : 22001020413_16v3   SQL활용
    ** 능력단위요소
      => 2001020413_16v3.1 기본 SQL 작성하기
      => 2001020413_16v3.2 고급 SQL 작성하기
   
=================================================
2001020413_16v3.1 기본 SQL 작성하기
=================================================
※기본적인 DML SQL문  ( C:create/insert,  R:read/select, U:update,  D:delete )

1. DDL(Data Definition Language) : 데이터를 정의
   - create, alter, drop, rename, truncate등
   - 자동커밋이 발생

2. DML(Data Manipulation Language) : 데이터를 조작하는 기능
   - select, insert, delete, update
   - transcation처리 지원 (commit, rollback)
   - sqlPlus : autoCommit  false => 물리적 저장위해 commit 필요
   - java : autoCommit  true => transaction 처리위해 autoCommit 을 false 로 한 후 실행
 
   ( DQL : 데이타검색 )
   - select 

3. DCL(Data Control Language) : 데이타 제어어
   - grant,  revoke

4. TCL : Transaction 제어
   - commit, rollback, savepoint


** schema : 개요, 윤곽
** domain : 영역, 범위
** revoke : 폐지하다
** grant : 승인하다, 인정하다

==MySql 과 오라클 비교 ===================================

*** 오라클은 계정 별로 Table 관리

*** 반면에 MySql 은 Table 위에 DataBase가 있음
	( 계정 아래에 반드시 DataBase가 있어야 Table 생성이 가능하다 )	
	=> DataBase 생성 후 Table 생성 
	만들기   => create database db1 ;
	확인하기 => show databases ; 
	사용하기 => use db1 ;
	현재 사용중인 DB 표시하기 => select database() ;
	삭제하기 => drop database db1 ;

*** 데이터 타입 의 다른점 
	-> oracle : number
	-> mySql : integer , float 로 구별해서 사용 

== 오라클의 자료형 ========================================= 

=> size 단위 : byte

 number : 숫자형
	-> number(p,s) 
	-> p : 소수점 미포함 전체 자리수 (5,2) -> 999.99
	-> s : 소수점 이하 자리수
	-> p 만 사용하면 소수점 이하는 반올림 되어 정수값만 저장
	-> p,s 모두 생략하면 입력한 값만큼 공간 할당 (38자리)
 
 char   : 문자형(고정형)-2000byte까지   

 varchar2 : 문자형(가변형) - 4000byte까지
	** 한글 길이
	-> 조합형은 글자당 2byte
	-> unicode 글자당 3byte


 long : 긴가변의 문자열) - 2GB 까지 

 clob : 문자형(4000byte이상일때)   - 최대 4GB
	-> e-book 등 대용량의 텍스트 데이터
 blob : binary로저장(그림, 음악등) - 최대 4GB
	-> 이미지, 사운드 등 구조화 되지 않은 데이터 저장 

 datetime : 날짜시간형
	-> 세기, 년,월,일,시,분,초 
	-> 특별한 형식의 지정이 없으면 년,월,일 만 출력 
	-> bc 4712년 1월1일 ~ ad 4712년 12월31일 까지의 날짜
 timestamp : date형의 확장

==================================================== 

*** DDL 연습

=> 생성(신규생성/다른테이블을 이용한 생성), 변경, 삭제
=> Table 관리 
	select * from tab;   => 테이블목록확인
	show tables ; (MySql)
	show all ;  
	show autocommit ;
	help index ;
	desc student;          => describe의 약자(테이블 구조확인) 

-------------------------------------------------------
*** 제약조건 Constraints  :  SQL활용01_02_Constraints.txt 참고
=================================================

** 5가지 기본 조건

=> PRIMARY KEY , p
	: NOT NULL & UNIQUE
=> FOREIGN KEY , r
=> NOT NULL , c
=> UNIQUE  , u
	: 중복 불가 (유일성 조건)
=> CHECK  , c
	: 저장 가능한 데이터의 값의 범위나 조건을 지정하여 설정한 값만을 허용
	( MySQL 5 이상 적용됨 )

=> DEFAULT 


=================================================
	 
1) 신규 테이블 만들기
  
=> 테이블명,
=> 필드명, type, size, (제약조건 : 필요시에만) 

=> create문(테이블생성)
   create table 테이블명(
         필드이름 데이터타입 [not null][primary key],
         필드이름 데이터타입 [not null].........);

=> student, jo  Table 생성하기
[[ Child Table ]]
create table student(
snum number(10) primary key,
sname varchar2(10) not null,
age number(3) not null,
gnum number(1) references jo(gnum)
);

[[ Parent Table ]]
create table jo(
gnum number(1) primary key,
chief number(10) not null,
gname varchar2(20) not null,
note varchar2(10)  
);

*** 생성 확인
=> desc student; desc jo;

=> 제약조건 확인하기

COLUMN Constraint_Name Format a15 ;
COLUMN Column_Name Format a15 ;
COLUMN Constraint_Type Format a15 ;
COLUMN Table_Name Format a15 ;

select Constraint_Name,  Constraint_Type, Table_Name from user_Constraints where Table_Name in('STUDENT') ;

select Constraint_Name, Column_Name, Table_Name from USER_CONS_COLUMNS 
where Table_Name = 'STUDENT' ;

** 한번에 조회 하기
select cl.Constraint_Name, cl.Column_Name, cl.Table_Name, cn.Constraint_Type from USER_CONS_COLUMNS cl,  user_Constraints cn
where cl.Table_Name = 'STUDENT'   and cl.Constraint_Name = cn.Constraint_Name   ;

select cl.Constraint_Name, cl.Column_Name, cl.Table_Name, cn.Constraint_Type from USER_CONS_COLUMNS cl,  user_Constraints cn
where cl.Table_Name = 'JO'   and cl.Constraint_Name = cn.Constraint_Name   ;

-------------------------------------------------------------------------------------------

*** 자료 입력
=> 아래  DML 참고 
insert into student values(1,'송인창',22,1); 
insert into student values(2,'한형진',22,1); 
insert into student values(3,'유지호',22,2); 
insert into student values(4,'이승재',22,2); 

 insert into jo values(1, 1, '1조만세', 'test');
 insert into jo values(2, 3, '2조만세', 'test');	
 insert into jo values(3, 4, '3조만세', 'test');	




insert into student values(1,'김화평',22,'Java','육아','반장',1); 
insert into student values(2, '김성수',22,'Java','육아','반장',1); 
insert into student values(3, '김지수',22,'Java','육아','반장',4); 
insert into student values(4, '남철우',22,'Java','육아','반장',4); 
insert into student values(5, '박근민',22,'Java','육아','반장',2); 
insert into student values(6, '박수호',22,'Java','육아','반장',2); 
insert into student values(7, '변종호',22,'Java','육아','반장',2); 
insert into student values(8, '손영덕',22,'Java','육아','반장',2); 
insert into student values(9, '위민경',22,'Java','육아','반장',1); 
insert into student values(10, '이제윤',22,'Java','육아','반장',5); 
insert into student values(11, '이해밀',22,'Java','육아','반장',5); 
insert into student values(12, '장동현',22,'Java','육아','반장',5); 
insert into student values(13, '전현태',22,'Java','육아','반장',5); 
insert into student values(14, '정재필',22,'Java','육아','반장',4);
insert into student values(15, '정현근',22,'Java','육아','반장',3);
insert into student values(16, '최주현',22,'Java','육아','반장',3);
insert into student values(17, '허상무',22,'Java','육아','반장',3);
insert into student values(18, '허재민',22,'Java','육아','반장',3);
insert into student values(19, '허지연',22,'Java','육아','반장',1);
insert into student values(20, '이성민',22,'Java','육아','반장',4);
      	
      insert into jo values(1, 1, '우주만세', '예쁜우주','육아일기','아빠최고');	    
      insert into jo values(2, 6, '오프조', '화이팅','호텔관리','부릉부릉');	    
      insert into jo values(3, 15, '현근조', '잘하자','미정','초보환영');	    
      insert into jo values(4, 4, '철우조', '잘하자','미정','초보환영');	    
      insert into jo values(5, 10, '제윤조', '잘하자','미정','초보환영');	

commit;    

=> 조회 
	select * from student;
	select * from jo;

=> Join :  jo 의 리스트를 출력 하면서 조장의 이름이 나오도록
 	select j.gnum, j.chief, s.sname, j.gname from jo j, student s where j.chief=s.snum;	

=> 연습
update student set sname='김화평', age=100 where snum=1;
update student set note='' where snum != 1;
update student set note='조장' where snum=6 or snum=15 or snum=4 or snum=10;
select * from student order by gnum ;
select * from student where snum>10 and note='조장';

=> 삭제
delete from student  where snum=22;

=> 제약조건  Test
insert into student values(1, '바나나',22, 'Spring','비행기수리','',1);
-> ORA-00001: 무결성 제약 조건(SYSTEM.SYS_C0011066)에 위배됩니다

insert into student values(33, '바나나',22, 'Spring','비행기수리','',7);
-> ORA-02291: 무결성 제약조건(SYSTEM.SYS_C0011067)이 위배되었습니다- 부모 키가 없습니다
-------------------------------------------------------------------------------------------
*** 연습 ***
-------------------------------------------------------------------------------------------
SQL> create  table  guest (  //엔터치면 자동으로 행번호    
2   sabun   number(4) primary key ,
3   name   varchar2(10) not null  ,
4   title    varchar2(10) not null  ,
5   nalja   date  not null ,
6   pay     number(3)   not null
    ) ; 

-----------------------------------

=> person 만들기

create table person (
idno varchar2(14) primary key,
name varchar2(20) not null,
age number(3),
gender char(1) 
) ;

=> 교재 10p 표1.7 을 이용하여 생성 실습 
-----------------------------------

CREATE TABLE `주문테이블 ordert` ( 
	`orderno` varchar(16) NOT NULL, 
	`custno` varchar(16) NOT NULL,
	`orderdate 주문일` varchar(8) NOT NULL,
	`price` decimal(15,2) NOT NULL,
	`배송도시` varchar(256),
	`배송완료일` varchar(8),
	`결제금액` varchar(8),
	`할인금액` decimal(15,2) NOT NULL,
	`point` decimal(15,2) NOT NULL,
	PRIMARY KEY (`주문번호`)
) 
==> Student , boardt, mcodet 

CREATE TABLE ordert (
orderno varchar(10)  , 
// => auto numbering 
custno varchar(10) references student(sno),
// Student 의 sno 를 참조하도록 -> foregin Key
orderdate date  NOT NULL,
price number(15,2) NOT NULL,
point number(5,2) NOT NULL default 100,
PRIMARY KEY (orderno)); 
-----------------------------------
=> 
CREATE TABLE ordert (
orderno number(10)  ,
custno number(4) references student(sno),
orderdate date  NOT NULL,
price number(15,2) NOT NULL,
point number(5,2) default 100,
PRIMARY KEY (orderno)); 


-------------------------------------------------------------------------------------------
*** Table 레코드(row) 입력
-------------------------------------------------------------------------------------------

=>  insert into 테이블명[(필드이름1, 필드이름2....)]  values
 					(data1,data2...)
    예)




       insert into member(name, email, addr) values	('magic','magic@m.com','서울');
       insert into member  values ('magic','magic@m.com','서울');
       insert into member(name, email) values
 			('magic','magic@m.com');

    예)모든 필드값을 입력하는 경우 필드명 생략가능
       insert into member  values('오이', 27, 'A');

=> insert into ordert (orderno, custno, orderdate, price)
                    values ((select nvl(max(orderno),0)+1 from ordert),1111,sysdate,10000) ;

=> person 에 insert 하기
insert into person values ('900909-1234567','홍길동',80,'M' ) ;
insert into person values ('000101-3234567','김나라',20,'M' ) ;
insert into person values ('990101-2234567','이나라',22 ,'F' ) ;
insert into person values ('000909-4234567','홍길동',18,'M' ) ;
insert into person values ('030909-4234567','홍길동',18,'M' ) ;
insert into person values ('040909-4234567','홍길동',18,'M' ) ;

insert into person values ('900909-1234567','이철숙',81,'F' ) ; 
1행에 오류:
ORA-00001: 무결성 제약 조건(SYSTEM.SYS_C0011048)에 위배됩니다

insert into person values ('880909-1234567','',81,'F' ) ;
1행에 오류:
ORA-01400: NULL을 ("SYSTEM"."PERSON"."NAME") 안에 삽입할 수 없습니다

=> select 문의 colomn 선택
select * from person;     // * :  모든컬럼
select idno, name from person;

=> select 문의 row 선택
select * from person where name='홍길동' ;
select * from person where age < 50 ;

=> 행, 열 모두 선택 
나이가 50 보다 작은 자료(레코드, 행)의 이름과 나이를 출력하세요 ~~
select name, age from person where age < 50 ; 

*** TEST 

=> error0
 insert into ordert (orderno, custno, orderdate, price)
                    values (1,1111,sysdate,10000) ;
 -> ORA-00001: unique constraint (SYSTEM.SYS_C007009) violated	

=> error1
 insert into ordert values ((select nvl(max(orderno),0)+1 from ordert),1111,sysdate,10000) ;
  -> ORA-00947: not enough values
=> error2
 insert into ordert (orderno, custno, orderdate, price)
                    values ((select nvl(max(orderno),0)+1 from ordert),1111,'',10000) ;	
 -> ORA-01400: cannot insert NULL into ("SYSTEM"."ORDERT"."ORDERDATE")
=> error3
 insert into ordert (orderno, custno, orderdate, price)
                    values ((select nvl(max(orderno),0)+1 from ordert),9999,sysdate,10000) ;
 -> ORA-02291: integrity constraint (SYSTEM.SYS_C007010) violated 
    		- parent key not found


---------------------------------------------------
=> default 값 설정시 default 값을 적용 하려면 ... 

create table student( 
code char(1) primary key ,
name varchar2(20) not null,
score number(3) default 77 
) ;
 
insert into student values('a','자바') ;  (x) 
insert into student (code,name) values('a','자바') ;  (o)


SQL> insert   into  guest  values( 1100, 'bc', 'card',  sysdate, 27 ) ;
SQL> insert   into  guest  values( 2200, 'cd', 'case', sysdate,  96 ) ;
SQL> commit ;

----------------------------------------------------
=> data 5개 입력 하기

insert into ordert values('0001','banana',sysdate,10000,1000);
insert into ordert values('0002','banana',sysdate,50000,1500);
insert into ordert values('0003','apple',sysdate,100000,2000);
insert into ordert values('0004','coffee',sysdate,70000,1700);
commit ;
select * from ordert;
 
---------------------------------------------------
*** 실습 
=> 제약조건 확인, 삭제, 추가

=> 제약조건 확인
   user_Constraints, USER_CONS_COLUMNS 모두 사용 가능.

set linesize 100 ;
set pagesize 100 ;
COLUMN Constraint_Name Format a15 ;
COLUMN Column_Name Format a15 ;
COLUMN Constraint_Type Format a15 ;
COLUMN Table_Name Format a15 ;

select Constraint_Name,  Constraint_Type, Table_Name from user_Constraints where Table_Name in('TEAMC') ;

select Constraint_Name, Column_Name, Table_Name from USER_CONS_COLUMNS 
where Table_Name = 'TEAMC' ;


** 한번에 조회 하기
select cl.Constraint_Name, cl.Column_Name, cl.Table_Name, cn.Constraint_Type from USER_CONS_COLUMNS cl,  user_Constraints cn
where cl.Table_Name = 'MEMBER'   and cl.Constraint_Name = cn.Constraint_Name   ;

CONSTRAINT_NAME COLUMN_NAME     TABLE_NAME  CONSTRAINT_TYPE
--------------- --------------- --------------- --------------- ---------------
SYS_C0011052    	NAME            	MEMBER          	C
SYS_C0011053    	LEV             	MEMBER         	C
SYS_C0011054    	ID              	MEMBER          	P
SYS_C0011051    	PASSWORD       	MEMBER          	C

---------------------------------------------------------------------

insert into ordert values('0005','coffee',sysdate,70000,'');
-> 동일 키 와 null 입력 후 확인
-> p key 위배, not null 에 위배 

=> 제약조건 삭제
alter table ordert  drop constraint SYS_C004683 ;

-> MEMBERB 의  PASSWORD 의 not null 조건 : SYS_C0011568 삭제하기         
    alter table memberB drop constraint 	SYS_C0011568 ;
-> 삭제 확인 (password 에 null 입력)
	insert into memberB values('grape','','바나나','B','1999-09-09',1000,33,'kkk','aaa.gif');
	
------------------------------------------

=> 제약조건 추가  
    memberA  ( id 에 동일자료가 있는상태 : id admin 이 2명)  ,  
    memberB ( id 에 동일 자료가 없는 상태) 
	-> create table memberB as select * from member where lev='B' ;
	     select id, name, lev from memberB;

-> memberB 의 id 에 p key 설정 
	alter table memberB add primary key (id) ;
-> 확인
	select Constraint_Name, Column_Name, Table_Name from USER_CONS_COLUMNS 	
		where Table_Name = 'MEMBERB' ;
	select Constraint_Name,  Constraint_Type, Table_Name from user_Constraints where Table_Name in('MEMBERB') ;
-> test  존재하는 id insert Test : 
	insert into memberB values('banana','1234','바나나','B','1999-09-09',1000,33,'kkk','aaa.gif');

-> memberA 의 id 에 p key 설정 
	alter table memberA add primary key (id) ;
	-> ORA-02437: (SYSTEM.SYS_C0011572)을 검증할 수 없습니다 - 잘못된 기본 키입니다
******

-> 테이블 구조 변경 후 test (OK)
alter table ordert add constraint "cc01" unique(item) ;

-> memberB 의 password 에 not null 부여하기
	alter table memberB add constraint "mb02" not null (password) ;
	-> ORA-00904: : not 부적합한 식별자  
	-> not null 속성은 table level 속성이라서  add constraint 는 불가능하고,
	   column modify  로 수정 가능함.

	1) password 에 null 이 있는경우
	alter table memberB modify password varchar2(100) not null ;
	-> ORA-02296: (SYSTEM.) 사용으로 설정 불가 - 널 값이 발견되었습니다.

	2) password 에 null 삭제 또는 수정 후 
	update memberB set password = '1111' where id='grape'  ;
	alter table memberB modify password varchar2(100) not null ;

*************************************************
---------------------------------------------------------------
2) 다른 테이블을 이용해서 신규 테이블을 생성하는 방법
=> 교재 10p
-------------------------------------------

2.1) 테이블 구조와 데이터 모두 복사
 
create table mymember as select * from member  ;
select * from mymember ;

=>  실습 
1) member 의 lev 가 'A' 인 member 의 id, password, name, lev 만 복사한 memberA 를 만든다.

-> create table memberA as select id, password, name, lev from member where lev='A' ; 
-> select * from memberA ;

2) memberA 에 id 가 'admin' 인 자료 insert 해보기
-> insert into memberA values('admin','1234','홍길동','A') ;

create table mystu2 as  select  * from student where sno>9999 ;

-> mymember , myboard 만들기
create table mymember as select * from member ;
create table myboard as select * from board ;

=> 확인

select cl.Constraint_Name, cn.Constraint_Type, cl.Column_Name, cl.Table_Name from USER_CONS_COLUMNS cl,  user_Constraints cn
where cl.Table_Name = 'MYMEMBER'   and cl.Constraint_Name = cn.Constraint_Name   ;

select Constraint_Name,  Constraint_Type, Table_Name from user_Constraints where Table_Name in('MEMBER') ;
select Constraint_Name, Column_Name, Table_Name from USER_CONS_COLUMNS where Table_Name = 'MYMEMBER' ;
 

-> memtest1 동일 id 자료 입력 해보기
insert into mymember values('orange','1111','오렌지','A','1999-09-09',100,100) ; 
-> 제약조건은 복사 안됨.  ( 단, not null 은 전달됨)

=> 원하는 column, row 선택가능 그러나 제약조건은 복사 안됨.
create table memTest2 as select id, name, point from memtest1 ;
select * from memtest2 ;

-------------------------------------------
2.2) 데이터 없이 테이블 구조만 복사 

=> where 에서 항상 false 인 조건을 지정  

create table mymember2 as select * from member where 1=2;

create table memtest3 as select * from memtest1 where 1=2 ;  
select * from memtest3 ;

create table memtest3 as select * from memtest1 where 1=2 ;  
select * from memtest3 ;

-> member 와 동일 구조의 student 만들기
create table student as select * from member where 1=2 ; 


-------------------------------------------
2.3) 이미 만들어진 Table에 다른 Table의 자료들 복사하기
=> 테이블 구조가 같아야함, 원하는 column, row 선택가능

-> student  에 member 의 자료 담기
insert into student select * from member ;

-> mymember2 에 member 의 자료 id, password 만 담기  
insert into mymember2 (id, password) select id, password from member ;

//-> 정확하게 비교해서 해당 id의 이름 추가되도록 수정하기 (update) 
//update mymember2 set name = (select m.name from member m,mymember2 m2 where  m.id = m2.id) ;
//=> 오류 	

insert into mymember2 (name) select name from member ;
=> new record 로 name만 있는 row 가 추가됨 
=> 결과 
ID         PASSWORD   NAME       LEV  BIRTHD      POINT WEIGHT RID
---------- ---------- ---------- ---- ---------- ------ ------ ----------
green      12345
hongsam    12345
leesam     12345
banana     12345
coffee     12345
apple      12345
                      김유신
                      홍길동
                      이순신
                      바나나
                      카푸치노
                      스티브

12 rows selected.



insert into memtest3 select * from member where lev='D' ;
select * from memtest3 ;

insert into mystu2 select * from student where sno >= 3333 ;

=> 이미 만들어진 Table에 다른 Table의 특정컬럼 선택해서 복사하기
insert into memtest1 (point) select point from member, memtest1 where memtest1.id=member.id ;
select id, lev, point from memtest1 ; 

-------------------
=> 제약조건은 복사가 되지 않음 확인
    ( alter table ......테이블 구조변경 으로 조건 추가해야 함 
	alter table mymember add primary key (id) ;   ) 	

=> mymember 에 id pkey, password, name 에 not null 
     myboard 에 seq에 pkey, id 는 foreignkey 설정 

->alter table mymember add primary key (id); 
->alter table myboard add primary key (seq);
->alter table myboard add foreign key (id) references mymember(id);
->alter table mymember modify password varchar2(10) not null ;
->alter table mymember modify name varchar2(30) not null ;

=> myboard의 id 참조키 설정에 ON Delete Cascade 추가하기 
-> alter table myboard modify id varchar2(10) references mymember(id) ON Delete Cascade;
---->(such a referential constraint already exists in the table)
-> 해결: 제약 삭제후 재설정 
제약조건 이름 확인후 (SYS_C007035)   
select cl.Constraint_Name, cn.Constraint_Type, cl.Column_Name, cl.Table_Name from USER_CONS_COLUMNS cl,  user_Constraints cn
    where cl.Table_Name = 'MYMEMBER'   and cl.Constraint_Name = cn.Constraint_Name   ;
select cl.Constraint_Name, cn.Constraint_Type, cl.Column_Name, cl.Table_Name from USER_CONS_COLUMNS cl,  user_Constraints cn
    where cl.Table_Name = 'MYBOARD'   and cl.Constraint_Name = cn.Constraint_Name   ;

제약 조건 삭제후 설정 
alter table myboard drop constraint SYS_C007035;

alter table myboard modify id varchar2(10) references mymember(id) ON Delete Cascade 



*** 실습1. 학생 들의 성적을 관리하는 scoret 을 생성하고, 
               테이블 구조 변경을 통해서 sno 에 P. key 제약조건을 추가하고,
	sno 를 모두 student 에서 가져오기.... 

-> 제약조건 없이 scoret Table 생성 ( sno, java, jsp, db => number(4) )
create table scoret( 
sno number(4),
java number(4), 
jsp number(4),
db number(4)
) ;
-> sno 에 P. key 제약조건을 추가
alter table scoret add primary key (sno) ;

-> sno 를 모두 student 에서 가져오기
insert into scoret (sno) select sno from student ;

-> 확인
select * from scoret ;
----------------------------------------
   SNO       JAVA        JSP         DB
------ ---------- ---------- ----------
  1111
  2222
  3333
  4444
  5555
  7777
----------------------------------------



select Constraint_Name,Column_Name,Table_Name from USER_CONS_COLUMNS 
where Table_Name in('MEMBER','MEMTEST1','MEMTEST2','MEMTEST3') ;

select Constraint_Name,  Constraint_Type, Table_Name from user_Constraints 
where Table_Name in('MEMBER','MEMTEST1','MEMTEST2','MEMTEST3') ;

=================================================

*** 제약조건 종합 연습
=> 제약조건 이름, 5개 속성 연습 (referenced 제외) 

create  table memberC (    
id varchar2(10) Constraint cc01 PRIMARY KEY ,
password varchar2(10) Constraint cc02 UNIQUE,
name varchar2(30) Constraint cc03 NOT NULL,
lev varchar2(2) DEFAULT 'D',
birthd varchar2(10) ,
point number(10) DEFAULT 100 ,
weight number(5,2) Constraint cc04 CHECK(weight BETWEEN 30 AND 200) ); 

-----------------------------------------------

** test1) varchar2 에 check 부여 가능한지 ???
create  table memberT (    
id varchar2(10) Constraint tc01 PRIMARY KEY ,
lev varchar2(2) Constraint tc02 CHECK(lev BETWEEN 'A' AND 'D') ); 
-> Table created.

=> insert 확인 
insert into memberT values('banana','A');
insert into memberT values('apple','D');
-> 1 row created.

insert into memberT values('orange','K');
-> ORA-02290: check constraint (SYSTEM.TC02) violated

** test2) check 로 'in' , 'out' 제한 가능한지 ???
create  table memberO (    
id varchar2(10) Constraint oc01 PRIMARY KEY ,
lev varchar2(3) Constraint oc02 CHECK(lev IN ('in','out') )); 
-> Table created.

=> insert 확인 
insert into memberO values('orange','in');
insert into memberO values('melon','out');

** 참고사항 --------
insert into memberO values('melon', sysdate+3,'out');
v3 = sysdate+i  //  현재부터 3일 후 
sql= "insert into memberO values('"   + v1 + "'," +v3+",'" + v2 + "')" ;
----------------------- 


select * from memberO;

insert into memberO values('cream','of');
-> ORA-02290: check constraint (SYSTEM.OC02) violated
-----------------------------------------------

=> 생성 확인 
-> desc memberC ;
-> select Constraint_Name,  Constraint_Type, Table_Name from user_Constraints where Table_Name in('MEMBERC') ;
	----------------------------------------------------------------
	CONSTRAINT_NAME CONSTRAINT_TYPE TABLE_NAME
	--------------- --------------- ---------------
	CC03            C               MEMBERC
	CC04            C               MEMBERC
	CC01            P               MEMBERC
	CC02            U               MEMBERC
	----------------------------------------------------------------

-> select Constraint_Name, Column_Name, Table_Name from USER_CONS_COLUMNS
    where Table_Name = 'MEMBERC' ;

	----------------------------------------------------------------
	CONSTRAINT_NAME COLUMN_NAME     TABLE_NAME
	--------------- --------------- ---------------
	CC03            NAME            MEMBERC
	CC04            WEIGHT          MEMBERC
	CC01            ID              MEMBERC
	CC02            PASSWORD        MEMBERC
	----------------------------------------------------------------

=> Test Data 입력
-> insert into memberC values('banana', '12345', '홍길동', 'D','1999-09-09',1000,66.77);

** 제약조건 Test

=> unique Test
insert into memberC values('apple', '12345', '홍길동', 'D','1999-09-09',1000,66.77);
-> ORA-00001: unique constraint (SYSTEM.CC02) violated
    insert into memberC values('apple', '12346', '홍길동', 'D','1999-09-09',1000,66.77);

=> check Test
insert into memberC values('melon', '12347', '홍길동', 'D','1999-09-09',1000,366.77);
-> ORA-02290: check constraint (SYSTEM.CC04) violated
    insert into memberC values('melon', '12347', '홍길동', 'D','1999-09-09',1000,49.77);
 
=================================================

3)  테이블 구조변경 (필드 추가 , 수정, 이름변경, 삭제)

-------------------------------------------------
=> alter table table명 add 컬럼명 타입 ;
=> alter table table명 modify 컬럼명 타입 ;
	( 컬럼크기, 컬럼타입, not null 부여 )
=> alter table table명 rename column 컬럼명 to new컬럼명  ;
=> alter table table명 drop column 컬럼명  ;
-------------------------------------------------

** DROP

=> 실습 : point필드삭제, item 상품필드추가 
-> mymember address 삭제하기 
alter table mymember drop column address ;


alter table mymember drop column point;
alter table mymember add item varchar(20) not null;



=> 컬럼 삭제 : point필드삭제
alter table ordert drop column point ; 
select * from ordert ; 

alter table mystu drop column pay ;
select * from mystu ; 

-----------------------------------------------------------------------
** ADD 

=> 제약조건 추가 
	alter table mymember add primary key (id) ; 

	alter table mymember add item varchar(20) not null ;
	-> ORA-01758: 테이블은 필수 열을 추가하기 위해 (NOT NULL) 비어 있어야 합니다.
	alter table mymember add item varchar(20) not null default 'computer' ;
	-> ORA-30649: 누락된 DIRECTORY 키워드
	alter table mymember add item varchar(20);

=> 컬럼 추가 :
=> mymember에 주소 추가 :  address varchar2(20)
     alter table mymember add address varchar2(10) default '경기도' ;

-> alter table member add test number(10) ;

item varchar2(10)   상품필드추가
alter table ordert add item varchar2(10) ;
select * from ordert ; 
 
insert into ordert values('0006','coffee',sysdate,70000,'phone');
insert into ordert values('0007','coffee',sysdate,70000,'phone');
-> ORA-00001: 무결성 제약 조건(SYSTEM.cc01)에 위배됩니다 -> item 의 unique조건

desc ordert ;  
// => table 의 구조를 표시함.
// describe : 묘사하다, 서술하다, 분석표

-----------------------------------------------------------------------
** RENAME 

=> 컬럼명 수정 
( custno => custid 로 변경하기 )
alter table ordert RENAME COLUMN custno to custid;
alter table mymember rename column birthd to birthday ;

**** Constraint Name 변경
alter table mymember rename constraint SYS_C0011081 to n_NotNull ;
-> 확인
select cl.Constraint_Name, cn.Constraint_Type, cl.Column_Name, cl.Table_Name from USER_CONS_COLUMNS cl,  user_Constraints cn
where cl.Table_Name = 'MYMEMBER'   and cl.Constraint_Name = cn.Constraint_Name   ;

alter table mymember rename constraint SYS_C007031 to p_key ;

=> address -> juso 변경
alter table mystu rename column address to juso ;

-----------------------------------------------------------------------

** MODIFY
 
=> 컬럼 Type, 길이 수정

** Test Table : mymember2 : data (record, row, tuple) 가 없는경우
	실수-> 정수
	alter table mymember2 modify weight number(10) ;  
	문자 -> 정수 
	alter table mymember2 modify birthd number(10) ; 
	문자 -> 실수
	alter table mymember2 modify password number(7,3);
	축소변환
	alter table mymember2 modify name varchar2(10) ;

** Test Table : mymember :  data (record, row, tuple) 가 있는경우

=> name 30 -> 10  : downsizing  기존의  자료들이 10을 넘지않음
	alter table mymember modify name varchar2(10);  // 성공

     name 10 -> 5  : downsizing  기존의  자료들이 5를 넘음
	alter table mymember modify name varchar2(5);
	-> ORA-01441: 일부 값이 너무 커서 열 길이를 줄일 수 없음

=> 실수형-> 정수형 으로 변경 
   ( weight 를 number(10) 로 )
	alter table mymember modify weight number(10) ;  
	-> ORA-01440: 정도 또는 자리수를 축소할 열은 비어 있어야 합니다
	   ( 입력된 값이 있어서 할 수 없다 )  
	Type은 실수 이지만 정수값으로 모두 수정 후 Test 
	update mymeber set weight = 90 ;	
	-> ORA-01440: 정도 또는 자리수를 축소할 열은 비어 있어야 합니다


-> 확인 : 컬럼의 값을 delete 후 Test
	update mymember set weight =null ;	// weight = 0 : 데이터가 있는것으로 취급함
	alter table mymember modify weight number(10) ;  	
	-> 테이블이 변경되었습니다. 

-> alter table member add test number(10) ;
    alter table member modify test number(20) ;  

-> 정수형-> 문자형 으로 변경
	 : weight 를 varchar2(20) 으로 변경
	alter table mymember modify weight varchar2(20) ;
	ORA-01439: 데이터 유형을 변경할 열은 비어 있어야 합니다

-> 문자형 -> 실수형 
	alter table mymember modify weight number(5,3);
	data  입력 후 test(실수형 -> 문자형 )
	update mymember set weight = 44.55 ;
	alter table mymember modify weight varchar2(20);
	-> 실수형 (UPsize)
	alter table mymember modify weight number(10,5);

-> 실수형-> 문자형 으로 변경
alter table ordert modify price varchar(15) ; 
-> 두 경우 모두 오류 ORA-01439: 데이터 유형을 변경할 열은 비어 있어야 합니다
-> 컬럼의 값이 있는 경우 오류

=> 문자열 -> 문자열
	-> DownSize ( password 크기를 50 으로 )
	alter table mymember modify password varchar2(50);
	ORA-01441: 일부 값이 너무 커서 열 길이를 줄일 수 없음

	-> UpSize ( name 크기를 40 으로 )
	alter table mymember modify name varchar2(40) ; 
** 실습 
1) mymember 를 삭제하고, member 를 이용해서 다시 생성한다.
	drop table mymember ;
	create table mymember as select * from member ;
	alter table mymember add primary key (id) ;

2) weight 의 값을 그대로 보존 하면서 Type을  varchar2(20) 으로 변경한다.
	-> weight 를 직접 변경하는것은 불가
	(neww varchar2(20)추가 -> 값 복사 (weight의 값)->weight 삭제 -> 이름 변경 )	



-> varchar2(20) 의 새 컬럼을 추가하고 ( neww )
	alter table mymember add neww  varchar2(20) ;
	-> 새 컬럼 neww  에 weight 의 값을 옮기고, weight 컬럼은 삭제 
	update mymember set neww=weight ;
	alter table mymember drop column weight ;
	-> 새 컬럼 neww 의 이름을 weight 로 변경




	- varchar2(20) 인 new 컬럼을 추가
	alter table mymember add temp varchar2(20) ;
	- weight 의 값을 옮기고, 기존의 weight 컬럼은 삭제, 컬럼명 변경 
	update mymember set temp=weight ;
	alter table mymember drop column weight;
	alter table mymember rename column temp to weight ;


-> data 값 지우고 test
update ordert set price=0 ;  => 그래도 modify 불가능

alter table ordert modify price number(15,2)  null ;  
update ordert set price='' ;
alter table ordert modify price varchar(15) ;  (변경 성공)

-> 정수 -> 문자 
alter table memtest1 modify point varchar2(10) ;  
-> 컬럼의 값이 있는 경우 오류

-> 문자형 -> 정수형으로  ( null 값을 가질 수 있는 item 으로 test )
update ordert set item='' ;

alter table ordert modify item number(10) ;  
 테이블이 변경되었습니다.  (OK)

-> 문자 -> 문자 (확장) 
alter table ordert modify custid varchar2(20) ;  
alter table mystu modify juso varchar2(80) ; 
alter table mystu modify juso varchar2(8) ; 
-> ORA-01441: cannot decrease column length because some value is too big

select * from mystu ;
insert into mystu values(1111, '홍', 'a', '서울' ) ;
=> alter table mystu modify sno number(4) primary key ; 

=================================================
4)  테이블명 변경
   rename 원래이름 to 변경이름
	=> rename ordert to myorder ;
		select * from mymember ;
	=> alter table myorder rename to banana ;

=> rename mystu to banana ; 


*** 테이블 목록 표시
select * from user_tables ;

select * from tab ;
select * from tab where TNAME like '%MEMBER%' ;

=================================================

5) 테이블 삭제
=>drop , truncate 

truncate table memtest2 ;
truncate table scoret ;
-> 테이블이 잘렸습니다.

-> data 만 삭제됨 
-> DDL 이므로 rollback 안됨 
   (조건 없이 모든 데이터를 delete 하는것과의 차이점)

select * from memtest2 ;
insert into memtest2 values('a001','bnana 쿠키',1000); 

drop table memtest3 ;
-> 테이블이 삭제되었습니다.
select * from memtest3 ;
insert into memtest1 values('a001','bnana 쿠키',1000); 

=================================================
** 실습 : 팀별 프로젝트의 Table 을 이용해서 


=> 제약조건(5가지) 을 반영해서 Table 생성문을 만들어 보세요.


=> 제약조건 출력 하기.

  
=================================================
---------------------------------------------------------
*** 권한, role, view, index 확인 명령

** 권한목록 보기

select * from USER_TAB_PRIVS_MADE ;
=> 현재 계정이 부여한 권한목록

select * from USER_TAB_PRIVS_RECD ;
=> 현재 계정에게 부여된 권한목록

** 롤 확인 (롤 관련 데이터 딕셔너리)
=> select * from DICT where TABLE_NAME LIKE '%ROLE%';
=> select * from USER_ROLE_PRIVS ; (현재 계정에 부여된 롤)
    - banana , system , sys 에서 모두 조회.비교 해보기

** view 목록조회
COLUMN view_name format a20;
COLUMN text format a30;

=> select view_name, text from USER_VIEWS ;

** index 목록조회
COLUMN INDEX_NAME format a15
COLUMN TABLE_NAME format a15
COLUMN COLUMN_NAME format a15

( 컬럼명, 테이블명 등은 반드시 대문자 ) 

=> select INDEX_NAME, TABLE_NAME, COLUMN_NAME from USER_IND_COLUMNS
where TABLE_NAME IN ('MEMBER', 'BOARD') ;

==================================================== 

*** 연습 ***

1.  어제 만든 Table 2개 (tableA, tableB )  를 이용해서 데이터와 구조가 동일한 복사본을 2개 ( A2, B2 ) 각각 만든다.
=> create , 제약조건 추가

=> 제약조건 목록 출력하기


2. 컬럼추가, 변경, 삭제
=> alter table ... -> add, modify, rename, drop

3. 테이블 이름변경, 삭제, truncate

